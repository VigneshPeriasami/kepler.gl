"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _panelHeaderAction = _interopRequireDefault(require("../panel-header-action"));

var _icons = require("../../common/icons");

var _styledComponents2 = require("../../common/styled-components");

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  display: flex;\n  align-items: center;\n  opacity: 0;\n\n  :hover {\n    cursor: move;\n    color: ", ";\n  }\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  margin-left: 12px;\n\n  .layer__title__type {\n    color: ", ";\n    font-size: 10px;\n    line-height: 12px;\n    letter-spacing: 0.37px;\n    text-transform: capitalize;\n  }\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  display: flex;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  display: flex;\n  color: ", ";\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  .layer__remove-layer {\n    opacity: 0;\n  }\n  :hover {\n    cursor: pointer;\n    background-color: ", ";\n\n    .layer__drag-handle {\n      opacity: 1;\n    }\n\n    .layer__remove-layer {\n      opacity: 1;\n    }\n\n    .layer__enable-config {\n      color: white\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  // required
  id: _propTypes.default.string.isRequired,
  isDragNDropEnabled: _propTypes.default.bool,
  isVisible: _propTypes.default.bool.isRequired,
  label: _propTypes.default.string.isRequired,
  onToggleVisibility: _propTypes.default.func.isRequired,
  // optional
  className: _propTypes.default.string,
  idx: _propTypes.default.number,
  isConfigActive: _propTypes.default.bool,
  labelRCGColorValues: _propTypes.default.arrayOf(_propTypes.default.number),
  onUpdateLayerLabel: _propTypes.default.func,
  onRemoveLayer: _propTypes.default.func
};
var defaultProps = {
  isDragNDropEnabled: true,
  showRemoveLayer: true
};

var StyledLayerPanelHeader = _styledComponents2.StyledPanelHeader.extend(_templateObject(), function (props) {
  return props.theme.panelBackgroundHover;
});

var HeaderLabelSection = _styledComponents.default.div(_templateObject2(), function (props) {
  return props.theme.textColor;
});

var HeaderActionSection = _styledComponents.default.div(_templateObject3());

var LayerTitleSection = _styledComponents.default.div(_templateObject4(), function (props) {
  return props.theme.subtextColor;
});

var DragHandle = _styledComponents.default.div(_templateObject5(), function (props) {
  return props.theme.textColorHl;
});

var LayerPanelHeader = function LayerPanelHeader(_ref) {
  var className = _ref.className,
      idx = _ref.idx,
      isConfigActive = _ref.isConfigActive,
      isDragNDropEnabled = _ref.isDragNDropEnabled,
      isVisible = _ref.isVisible,
      label = _ref.label,
      layerId = _ref.layerId,
      layerType = _ref.layerType,
      labelRCGColorValues = _ref.labelRCGColorValues,
      onToggleVisibility = _ref.onToggleVisibility,
      onUpdateLayerLabel = _ref.onUpdateLayerLabel,
      onToggleEnableConfig = _ref.onToggleEnableConfig,
      onRemoveLayer = _ref.onRemoveLayer,
      showRemoveLayer = _ref.showRemoveLayer;
  return _react.default.createElement(StyledLayerPanelHeader, {
    className: (0, _classnames.default)('layer-panel__header', {
      'sort--handle': !isConfigActive
    }),
    active: isConfigActive,
    labelRCGColorValues: labelRCGColorValues,
    onClick: onToggleEnableConfig
  }, _react.default.createElement(HeaderLabelSection, {
    className: "layer-panel__header__content"
  }, isDragNDropEnabled && _react.default.createElement(DragHandle, {
    className: "layer__drag-handle"
  }, _react.default.createElement(_icons.VertDots, {
    height: "20px"
  })), _react.default.createElement(_panelHeaderAction.default, {
    className: "layer__visibility-toggle",
    id: layerId,
    tooltip: isVisible ? 'hide layer' : 'show layer',
    onClick: onToggleVisibility,
    IconComponent: isVisible ? _icons.EyeSeen : _icons.EyeUnseen,
    active: isVisible,
    flush: true
  }), _react.default.createElement(LayerTitleSection, {
    className: "layer__title"
  }, _react.default.createElement("div", null, _react.default.createElement(LayerLabelEditor, {
    label: label,
    onEdit: onUpdateLayerLabel
  }), _react.default.createElement("div", {
    className: "layer__title__type"
  }, layerType)))), _react.default.createElement(HeaderActionSection, {
    className: "layer-panel__header__actions"
  }, showRemoveLayer ? _react.default.createElement(_panelHeaderAction.default, {
    className: "layer__remove-layer",
    id: layerId,
    tooltip: 'Remove layer',
    onClick: onRemoveLayer,
    tooltipType: "error",
    IconComponent: _icons.Trash
  }) : null, _react.default.createElement(_panelHeaderAction.default, {
    className: "layer__enable-config",
    id: layerId,
    tooltip: 'Layer settings',
    onClick: onToggleEnableConfig,
    IconComponent: _icons.ArrowDown
  })));
};

var LayerLabelEditor = function LayerLabelEditor(_ref2) {
  var label = _ref2.label,
      onEdit = _ref2.onEdit;
  return _react.default.createElement(_styledComponents2.InlineInput, {
    type: "text",
    className: "layer__title__editor",
    value: label,
    onClick: function onClick(e) {
      e.stopPropagation();
    },
    onChange: onEdit,
    id: "input-layer-label"
  });
};

LayerPanelHeader.propTypes = propTypes;
LayerPanelHeader.defaultProps = defaultProps;
var _default = LayerPanelHeader;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,