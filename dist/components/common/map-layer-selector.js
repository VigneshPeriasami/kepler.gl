"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _switch = _interopRequireDefault(require("./switch"));

var _utils = require("../../utils/utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2.default)(["\n  padding: 12px;\n\n  .map-layer-selector__item {\n    margin: 12px 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  // Required
  layers: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  onMapToggleLayer: _propTypes.default.func.isRequired
};

var MapLayerSelect = _styledComponents.default.div(_templateObject());

var MapLayerSelector = function MapLayerSelector(_ref) {
  var layers = _ref.layers,
      onMapToggleLayer = _ref.onMapToggleLayer;
  return _react.default.createElement(MapLayerSelect, {
    className: "map-layer-selector"
  }, layers.map(function (layer, index) {
    return _react.default.createElement("div", {
      key: layer.id,
      className: "map-layer-selector__item"
    }, _react.default.createElement(_switch.default, {
      checked: layer.isVisible,
      id: "".concat(layer.id, "-toggle-").concat((0, _utils.generateHashId)(4)),
      label: layer.name,
      onChange: function onChange(e) {
        e.preventDefault();
        onMapToggleLayer(layer.id);
      }
    }));
  }));
};

MapLayerSelector.propTypes = propTypes;
var _default = MapLayerSelector;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9tYXAtbGF5ZXItc2VsZWN0b3IuanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwibGF5ZXJzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJvbk1hcFRvZ2dsZUxheWVyIiwiZnVuYyIsIk1hcExheWVyU2VsZWN0Iiwic3R5bGVkIiwiZGl2IiwiTWFwTGF5ZXJTZWxlY3RvciIsIm1hcCIsImxheWVyIiwiaW5kZXgiLCJpZCIsImlzVmlzaWJsZSIsIm5hbWUiLCJlIiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUc7QUFDaEI7QUFDQUMsRUFBQUEsTUFBTSxFQUFFQyxtQkFBVUMsT0FBVixDQUFrQkQsbUJBQVVFLE1BQTVCLEVBQW9DQyxVQUY1QjtBQUdoQkMsRUFBQUEsZ0JBQWdCLEVBQUVKLG1CQUFVSyxJQUFWLENBQWVGO0FBSGpCLENBQWxCOztBQU1BLElBQU1HLGNBQWMsR0FBR0MsMEJBQU9DLEdBQVYsbUJBQXBCOztBQVFBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUI7QUFBQSxNQUFFVixNQUFGLFFBQUVBLE1BQUY7QUFBQSxNQUFVSyxnQkFBVixRQUFVQSxnQkFBVjtBQUFBLFNBQ3ZCLDZCQUFDLGNBQUQ7QUFBZ0IsSUFBQSxTQUFTLEVBQUM7QUFBMUIsS0FDR0wsTUFBTSxDQUFDVyxHQUFQLENBQVcsVUFBQ0MsS0FBRCxFQUFRQyxLQUFSO0FBQUEsV0FDVjtBQUFLLE1BQUEsR0FBRyxFQUFFRCxLQUFLLENBQUNFLEVBQWhCO0FBQW9CLE1BQUEsU0FBUyxFQUFDO0FBQTlCLE9BQ0UsNkJBQUMsZUFBRDtBQUNFLE1BQUEsT0FBTyxFQUFFRixLQUFLLENBQUNHLFNBRGpCO0FBRUUsTUFBQSxFQUFFLFlBQUtILEtBQUssQ0FBQ0UsRUFBWCxxQkFBd0IsMkJBQWUsQ0FBZixDQUF4QixDQUZKO0FBR0UsTUFBQSxLQUFLLEVBQUVGLEtBQUssQ0FBQ0ksSUFIZjtBQUlFLE1BQUEsUUFBUSxFQUFFLGtCQUFBQyxDQUFDLEVBQUk7QUFDYkEsUUFBQUEsQ0FBQyxDQUFDQyxjQUFGO0FBQ0FiLFFBQUFBLGdCQUFnQixDQUFDTyxLQUFLLENBQUNFLEVBQVAsQ0FBaEI7QUFDRDtBQVBILE1BREYsQ0FEVTtBQUFBLEdBQVgsQ0FESCxDQUR1QjtBQUFBLENBQXpCOztBQWtCQUosZ0JBQWdCLENBQUNYLFNBQWpCLEdBQTZCQSxTQUE3QjtlQUVlVyxnQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxOSBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgU3dpdGNoIGZyb20gJ2NvbXBvbmVudHMvY29tbW9uL3N3aXRjaCc7XG5pbXBvcnQge2dlbmVyYXRlSGFzaElkfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgLy8gUmVxdWlyZWRcbiAgbGF5ZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KS5pc1JlcXVpcmVkLFxuICBvbk1hcFRvZ2dsZUxheWVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5jb25zdCBNYXBMYXllclNlbGVjdCA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDEycHg7XG5cbiAgLm1hcC1sYXllci1zZWxlY3Rvcl9faXRlbSB7XG4gICAgbWFyZ2luOiAxMnB4IDA7XG4gIH1cbmA7XG5cbmNvbnN0IE1hcExheWVyU2VsZWN0b3IgPSAoe2xheWVycywgb25NYXBUb2dnbGVMYXllcn0pID0+IChcbiAgPE1hcExheWVyU2VsZWN0IGNsYXNzTmFtZT1cIm1hcC1sYXllci1zZWxlY3RvclwiPlxuICAgIHtsYXllcnMubWFwKChsYXllciwgaW5kZXgpID0+IChcbiAgICAgIDxkaXYga2V5PXtsYXllci5pZH0gY2xhc3NOYW1lPVwibWFwLWxheWVyLXNlbGVjdG9yX19pdGVtXCI+XG4gICAgICAgIDxTd2l0Y2hcbiAgICAgICAgICBjaGVja2VkPXtsYXllci5pc1Zpc2libGV9XG4gICAgICAgICAgaWQ9e2Ake2xheWVyLmlkfS10b2dnbGUtJHtnZW5lcmF0ZUhhc2hJZCg0KX1gfVxuICAgICAgICAgIGxhYmVsPXtsYXllci5uYW1lfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIG9uTWFwVG9nZ2xlTGF5ZXIobGF5ZXIuaWQpO1xuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApKX1cbiAgPC9NYXBMYXllclNlbGVjdD5cbik7XG5cbk1hcExheWVyU2VsZWN0b3IucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuXG5leHBvcnQgZGVmYXVsdCBNYXBMYXllclNlbGVjdG9yO1xuIl19