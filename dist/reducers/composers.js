"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.addDataToMapComposed = exports.updateVisDataComposed = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _actionTypes = _interopRequireDefault(require("../constants/action-types"));

var _mapStateUpdaters = require("./map-state-updaters");

var _uiStateUpdaters = require("./ui-state-updaters");

var _visStateUpdaters = require("./vis-state-updaters");

var _mapStyleUpdaters = require("./map-style-updaters");

var _dataUtils = require("../utils/data-utils");

var _schemas = _interopRequireDefault(require("../schemas"));

var _compostedUpdaters;

// compose action to apply result multiple reducers, with the output of one

/**
 * Apply data and config to visState reducer
 * @param {object} state
 * @param {object} action
 * @param {object} action.options
 * @param {Boolean} action.options.centerMap
 * @param {Boolean} action.options.readOnly
 * @param {object} action.config
 * @returns state new reducer state
 */
var updateVisDataComposed = function updateVisDataComposed(state, action) {
  // keep a copy of oldLayers
  var oldLayers = state.visState.layers;
  var visState = (0, _visStateUpdaters.updateVisDataUpdater)(state.visState, action);
  var defaultOptions = {
    centerMap: true
  };
  var options = (0, _objectSpread2.default)({}, defaultOptions, action.options);
  var bounds;

  if (options.centerMap) {
    // find map bounds for new layers
    var newLayers = visState.layers.filter(function (nl) {
      return !oldLayers.find(function (ol) {
        return ol === nl;
      });
    });
    bounds = (0, _dataUtils.findMapBounds)(newLayers);
  }

  return (0, _objectSpread2.default)({}, state, {
    visState: visState,
    mapState: bounds ? (0, _mapStateUpdaters.fitBoundsUpdater)(state.mapState, {
      payload: bounds
    }) : state.mapState,
    uiState: (0, _objectSpread2.default)({}, (0, _uiStateUpdaters.toggleModalUpdater)(state.uiState, {
      payload: null
    }), options.hasOwnProperty('readOnly') ? {
      readOnly: options.readOnly
    } : {})
  });
};
/**
 * Combine data and full configuration update in a single action
 * @param state
 * @param action {datasets, options, config}
 * @returns state
 */


exports.updateVisDataComposed = updateVisDataComposed;

var addDataToMapComposed = function addDataToMapComposed(state, action) {
  var _action$payload = action.payload,
      datasets = _action$payload.datasets,
      options = _action$payload.options,
      config = _action$payload.config;
  var parsedConfig = config;

  if (config && config.config && config.version) {
    // if passed in saved config
    parsedConfig = _schemas.default.parseSavedConfig(config);
  } // Update visState store


  var mergedState = updateVisDataComposed(state, {
    datasets: datasets,
    options: options,
    config: parsedConfig && parsedConfig.visState
  }); // Update mapState store

  mergedState = (0, _objectSpread2.default)({}, mergedState, {
    mapState: (0, _mapStateUpdaters.receiveMapConfigUpdater)(mergedState.mapState, {
      payload: {
        mapState: parsedConfig && parsedConfig.mapState
      }
    })
  }); // Update mapStyle store

  mergedState = (0, _objectSpread2.default)({}, mergedState, {
    mapStyle: (0, _mapStyleUpdaters.receiveMapConfigUpdater)(mergedState.mapStyle, {
      payload: {
        mapStyle: parsedConfig && parsedConfig.mapStyle
      }
    })
  });
  return mergedState;
};

exports.addDataToMapComposed = addDataToMapComposed;
var compostedUpdaters = (_compostedUpdaters = {}, (0, _defineProperty2.default)(_compostedUpdaters, _actionTypes.default.UPDATE_VIS_DATA, updateVisDataComposed), (0, _defineProperty2.default)(_compostedUpdaters, _actionTypes.default.ADD_DATA_TO_MAP, addDataToMapComposed), _compostedUpdaters);
var _default = compostedUpdaters;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,