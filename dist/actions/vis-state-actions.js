"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerConfigChange = layerConfigChange;
exports.layerTypeChange = layerTypeChange;
exports.layerVisualChannelConfigChange = layerVisualChannelConfigChange;
exports.layerVisConfigChange = layerVisConfigChange;
exports.updateLayerBlending = updateLayerBlending;
exports.interactionConfigChange = interactionConfigChange;
exports.setFilter = setFilter;
exports.addFilter = addFilter;
exports.addLayer = addLayer;
exports.reorderLayer = reorderLayer;
exports.removeFilter = removeFilter;
exports.removeLayer = removeLayer;
exports.removeDataset = removeDataset;
exports.showDatasetTable = showDatasetTable;
exports.updateVisData = updateVisData;
exports.toggleAnimation = toggleAnimation;
exports.updateAnimationSpeed = updateAnimationSpeed;
exports.enlargeFilter = enlargeFilter;
exports.onLayerHover = onLayerHover;
exports.onLayerClick = onLayerClick;
exports.onMapClick = onMapClick;
exports.toggleLayerForMap = toggleLayerForMap;
exports.setVisibleLayersForMap = setVisibleLayersForMap;
exports.setFilterPlot = setFilterPlot;
exports.loadFiles = loadFiles;
exports.loadFilesErr = loadFilesErr;

var _actionTypes = _interopRequireDefault(require("../constants/action-types"));

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// vis-state-reducer
function layerConfigChange(oldLayer, newConfig) {
  return {
    type: _actionTypes.default.LAYER_CONFIG_CHANGE,
    oldLayer: oldLayer,
    newConfig: newConfig
  };
}

function layerTypeChange(oldLayer, newType) {
  return {
    type: _actionTypes.default.LAYER_TYPE_CHANGE,
    oldLayer: oldLayer,
    newType: newType
  };
}

function layerVisualChannelConfigChange(oldLayer, newConfig, channel) {
  return {
    type: _actionTypes.default.LAYER_VISUAL_CHANNEL_CHANGE,
    oldLayer: oldLayer,
    newConfig: newConfig,
    channel: channel
  };
}

function layerVisConfigChange(oldLayer, newVisConfig) {
  return {
    type: _actionTypes.default.LAYER_VIS_CONFIG_CHANGE,
    oldLayer: oldLayer,
    newVisConfig: newVisConfig
  };
}

function updateLayerBlending(mode) {
  return {
    type: _actionTypes.default.UPDATE_LAYER_BLENDING,
    mode: mode
  };
}

function interactionConfigChange(config) {
  return {
    type: _actionTypes.default.INTERACTION_CONFIG_CHANGE,
    config: config
  };
}

function setFilter(idx, prop, value) {
  return {
    type: _actionTypes.default.SET_FILTER,
    idx: idx,
    prop: prop,
    value: value
  };
}

function addFilter(dataId) {
  return {
    type: _actionTypes.default.ADD_FILTER,
    dataId: dataId
  };
}

function addLayer(props) {
  return {
    type: _actionTypes.default.ADD_LAYER,
    props: props
  };
}

function reorderLayer(order) {
  return {
    type: _actionTypes.default.REORDER_LAYER,
    order: order
  };
}

function removeFilter(idx) {
  return {
    type: _actionTypes.default.REMOVE_FILTER,
    idx: idx
  };
}

function removeLayer(idx) {
  return {
    type: _actionTypes.default.REMOVE_LAYER,
    idx: idx
  };
}

function removeDataset(key) {
  return {
    type: _actionTypes.default.REMOVE_DATASET,
    key: key
  };
}

function showDatasetTable(dataId) {
  return {
    type: _actionTypes.default.SHOW_DATASET_TABLE,
    dataId: dataId
  };
}
/**
 *
 * @param datasets - Array of datasets :
 * {info: {id: '', color: hex, label: '']}, data: {fields: [], rows: []}}
 * @param options {centerMap, readOnly}
 * @param config {visState, mapState, mapStyle}
  */


function updateVisData(datasets, options, config) {
  return {
    type: _actionTypes.default.UPDATE_VIS_DATA,
    datasets: datasets,
    options: options,
    config: config
  };
}

function toggleAnimation(idx) {
  return {
    type: _actionTypes.default.TOGGLE_FILTER_ANIMATION,
    idx: idx
  };
}

function updateAnimationSpeed(idx, speed) {
  return {
    type: _actionTypes.default.UPDATE_FILTER_ANIMATION_SPEED,
    idx: idx,
    speed: speed
  };
}

function enlargeFilter(idx) {
  return {
    type: _actionTypes.default.ENLARGE_FILTER,
    idx: idx
  };
}

function onLayerHover(info) {
  return {
    type: _actionTypes.default.LAYER_HOVER,
    info: info
  };
}

function onLayerClick(info) {
  return {
    type: _actionTypes.default.LAYER_CLICK,
    info: info
  };
}

function onMapClick() {
  return {
    type: _actionTypes.default.MAP_CLICK
  };
}
/**
 * Toggle a single layer for a give map
 * @param mapIndex
 * @param layerId
 * @returns {{type: *, mapIndex: *, layerId: *}}
 */


function toggleLayerForMap(mapIndex, layerId) {
  return {
    type: _actionTypes.default.TOGGLE_LAYER_FOR_MAP,
    mapIndex: mapIndex,
    layerId: layerId
  };
}
/**
 * Toggle layer visibility on split views
 * @param layerIndex the layer we want to toggle visibility on
 * @param mapIndex the map index
 * @returns {{type: null, layerIndex: *, mapIndex: *}}
 */


function setVisibleLayersForMap(mapIndex, layerIds) {
  return {
    type: _actionTypes.default.SET_VISIBLE_LAYERS_FOR_MAP,
    mapIndex: mapIndex,
    layerIds: layerIds
  };
}

function setFilterPlot(idx, newProp) {
  return {
    type: _actionTypes.default.SET_FILTER_PLOT,
    idx: idx,
    newProp: newProp
  };
}

function loadFiles(files) {
  return {
    type: _actionTypes.default.LOAD_FILES,
    files: files
  };
}

function loadFilesErr(error) {
  return {
    type: _actionTypes.default.LOAD_FILES_ERR,
    error: error
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,